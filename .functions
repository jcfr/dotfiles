#!/bin/bash

# Create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# Determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}

# Create a data URL from a file
dataurl() {
	local mimeType
	mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# UTF-8-encode a string of Unicode symbols
escape() {
	local args
	args=( $(printf "%s" "$*" | xxd -p -c1 -u) )
	printf "\\\x%s" "${args[@]}"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Decode \x{ABCD}-style Unicode escape sequences
unidecode() {
	perl -e "binmode(STDOUT, ':utf8'); print \"$*\""
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Get a character’s Unicode code point
codepoint() {
	perl -e "use utf8; print sprintf('U+%04X', ord(\"$*\"))"
	# print a newline unless we’re piping the output to another program
	if [ -t 1 ]; then
		echo ""; # newline
	fi
}

# Call from a local repo to open the repository on github/bitbucket in browser
repo() {
	local giturl
	giturl=$(git config --get remote.origin.url | sed 's/git@/\/\//g' | sed 's/.git$//' | sed 's/https://g' | sed 's/:/\//g')
	if [[ $giturl == "" ]]; then
		echo "Not a git repository or no remote.origin.url is set."
	else
		local gitbranch
		gitbranch=$(git rev-parse --abbrev-ref HEAD)
		local giturl="http:${giturl}"

		if [[ $gitbranch != "master" ]]; then
			if echo "${giturl}" | grep -i "bitbucket" > /dev/null ; then
				local giturl="${giturl}/branch/${gitbranch}"
                    	else
                    		local giturl="${giturl}/tree/${gitbranch}"
                    	fi
		fi

		echo "$giturl"
		open "$giturl"
	fi
}

# Get colors in manual pages
man() {
	env \
		LESS_TERMCAP_mb="$(printf '\e[1;31m')" \
		LESS_TERMCAP_md="$(printf '\e[1;31m')" \
		LESS_TERMCAP_me="$(printf '\e[0m')" \
		LESS_TERMCAP_se="$(printf '\e[0m')" \
		LESS_TERMCAP_so="$(printf '\e[1;44;33m')" \
		LESS_TERMCAP_ue="$(printf '\e[0m')" \
		LESS_TERMCAP_us="$(printf '\e[1;32m')" \
		man "$@"
}

# check if uri is up
isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

# one-way sync of folder_src into folder_dest
sync1way() {
    if [[ "$#" != 2 ]]; then
        echo "Usage: sync1way /path/to/src /path/to/dst"
        return 1
    fi
    local folder_src=$1
    local folder_dest=$2
    [[ ! -d "$folder_dest" ]] && mkdir -p "$folder_dest"
    inotifywait -mr \
            --timefmt '%d/%m/%y %H:%M' \
            --format '%T %w %f' \
            -e close_write "$folder_src" | while read -r dir file; do
        FILECHANGE=${dir}${file};
        echo ""
        printf "%0.s*" {1..80}; printf '\n'
        echo "$FILECHANGE";
        rsync -rtvu "$folder_src" "$folder_dest";
    done
}

# execute command in folder if any files in folder changed
watchandrun() {
    if [[ "$#" -lt 2 ]]; then
        echo "Usage: watchandrun /path/to/a/folder command [arg [...]]"
        return 1
    fi
    local folder=$1; shift;
    local command=$1; shift;
    inotifywait -mr --exclude "$folder/.git|$folder/idea" \
            --timefmt '%d/%m/%y %H:%M' \
            --format '%T %w %f' \
            -e close_write "$folder" | while read -r dir file; do
        FILECHANGE=${dir}${file};
        echo ""
        printf "%0.s*" {1..80}; printf '\n'
        echo "$FILECHANGE";
        echo "Executing $command $*"
        (cd "$folder" || exit 1; "$command" "$@";)
    done
}

pathadd() {
    if [ -d "$1" ] && ! echo $PATH | grep -E -q "(^|:)$1($|:)" ; then
        if [ "$2" = "after" ] ; then
            PATH="$PATH:${1%/}"
        else
            PATH="${1%/}:$PATH"
        fi
    fi
}

pathrm() {
    PATH="$(echo ${PATH} | sed -e "s;\(^\|:\)${1%/}\(:\|\$\);\1\2;g" -e 's;^:\|:$;;g' -e 's;::;:;g')"
}

validate_ci_configs() {
  if [[ -f .circleci/config.yml ]]; then
    circleci config validate -c .circleci/config.yml
  else
    echo ".circleci/config.yml not found"
  fi

  if [[ .travis.yml ]]; then
    travis-cli lint .travis.yml
  else
    echo ".travis.yml not found"
  fi

}

expand_tabs_as_n_spaces() {
  if [[ "$#" != 2 ]]; then
    echo "Usage: expand_tabs_as_n_spaces number_of_space file"
    return 1
  fi
  number_of_space=$1
  input_file="$2"
  output_file="${input_file}"
  tmp=`mktemp` && expand -t ${number_of_space} "${input_file}" > "${tmp}" && mv "${tmp}" "${output_file}"
}

expand_tabs_as_two_spaces() {
  if [[ "$#" -lt 1 ]]; then
    echo "Usage: expand_tabs_as_two_spaces file ..."
    return 1
  fi
  for file in $@; do
    expand_tabs_as_n_spaces 2 "${file}"
  done
}

expand_tabs_as_four_spaces() {
  if [[ "$#" -lt 1 ]]; then
    echo "Usage: expand_tabs_as_four_spaces file ..."
    return 1
  fi
  for file in $@; do
    expand_tabs_as_n_spaces 4 "${file}"
  done
}

strip_trailing_whitespaces() {
  if [[ "$#" -lt 1 ]]; then
    echo "Usage: strip_trailing_whitespaces file ..."
    return 1
  fi
  for file in $@; do
    sed -i 's/[ \t]*$//' "${file}"
  done
}

# Remove the last command from the history
# See https://unix.stackexchange.com/a/233625/153286
forget() {
  history -d $( history | awk 'END{print $1-1}' )
}
